Total: 378 samples
     346  91.5%  91.5%      346  91.5% spin_lock
      24   6.3%  97.9%       24   6.3% __strcmp_sse42
       4   1.1%  98.9%       19   5.0% SortedList_insert
       4   1.1% 100.0%       13   3.4% SortedList_lookup
       0   0.0% 100.0%      378 100.0% __clone
       0   0.0% 100.0%      378 100.0% listFunction
       0   0.0% 100.0%      378 100.0% start_thread
ROUTINE ====================== spin_lock in /u/cs/ugrad/meiyi/2b/lab2_list.c
   346    346 Total samples (flat / cumulative)
     .      .   37:   head->key = NULL;
     .      .   38:   return head;
     .      .   39: }
     .      .   40: 
     .      .   41: // for spin lock
---
     .      .   42: void spin_lock(int *lock) {
   346    346   43:   while(__sync_lock_test_and_set(lock, 1) == 1)
     .      .   44:     ;
     .      .   45: }
---
     .      .   46: 
     .      .   47: // for spin lock
     .      .   48: void unlock(int *lock) { 
     .      .   49:   __sync_lock_release(lock);
     .      .   50: }
ROUTINE ====================== spin_lock in /u/cs/ugrad/meiyi/2b/lab2_list.c
   346    346 Total samples (flat / cumulative)
     .      .   37:   head->key = NULL;
     .      .   38:   return head;
     .      .   39: }
     .      .   40: 
     .      .   41: // for spin lock
---
     .      .   42: void spin_lock(int *lock) {
   346    346   43:   while(__sync_lock_test_and_set(lock, 1) == 1)
     .      .   44:     ;
     .      .   45: }
---
     .      .   46: 
     .      .   47: // for spin lock
     .      .   48: void unlock(int *lock) { 
     .      .   49:   __sync_lock_release(lock);
     .      .   50: }
Total: 1209 samples
     987  81.6%  81.6%      987  81.6% lock_spin
     158  13.1%  94.7%      158  13.1% __strcmp_sse42
      36   3.0%  97.7%      101   8.4% SortedList_lookup
      21   1.7%  99.4%      117   9.7% SortedList_insert
       3   0.2%  99.7%        3   0.2% _init
       1   0.1%  99.8%        1   0.1% __munmap
       1   0.1%  99.8%     1208  99.9% listFunction
       1   0.1%  99.9%      631  52.2% mul_SortedList_insert
       1   0.1% 100.0%      576  47.6% mul_SortedList_lookup
       0   0.0% 100.0%     1208  99.9% __clone
       0   0.0% 100.0%        1   0.1% __deallocate_stack
       0   0.0% 100.0%        1   0.1% __free_stacks
       0   0.0% 100.0%        1   0.1% __libc_start_main
       0   0.0% 100.0%        1   0.1% _start
       0   0.0% 100.0%      987  81.6% lock
       0   0.0% 100.0%        1   0.1% main
       0   0.0% 100.0%        1   0.1% pthread_join
       0   0.0% 100.0%     1208  99.9% start_thread
ROUTINE ====================== lock in /u/cs/ugrad/meiyi/2b/lab2_list.c
     0    987 Total samples (flat / cumulative)
     .      .   96:     }
     .      .   97:   }
     .      .   98:   return randomString;
     .      .   99: }
     .      .  100: 
---
     .      .  101: void lock(int ind,Sublist *sub_list) {
     .      .  102:   if(mutex_flag) {
     .      .  103:     struct timespec start, end;
     .      .  104:     clock_gettime(CLOCK_MONOTONIC, &start);
     .      .  105:     pthread_mutex_lock(&sub_list->mutex_lock);
     .      .  106:     clock_gettime(CLOCK_MONOTONIC, &end);
     .      .  107:     unsigned long mutex_time = ((long long)end.tv_sec - (long long)start.tv_sec) * 1000000000LL+(end.tv_nsec - start.tv_nsec);
     .      .  108:     waitTime[ind]+=mutex_time;
     .      .  109:   }
     .      .  110:   if(spin_flag)
     .    987  111:     lock_spin(&sub_list->spin_lock);      
     .      .  112: }
---
     .      .  113: 
     .      .  114: void unlock(Sublist *sub_list) {
     .      .  115:   if (mutex_flag)       
     .      .  116:     pthread_mutex_unlock(&sub_list->mutex_lock);
     .      .  117: 
ROUTINE ====================== lock_spin in /u/cs/ugrad/meiyi/2b/lab2_list.c
   987    987 Total samples (flat / cumulative)
     .      .   66:       sublists[i].spin_lock=0;
     .      .   67:   }
     .      .   68: }
     .      .   69: 
     .      .   70: // for spin lock
---
     .      .   71: void lock_spin(int *lock) {
   987    987   72:   while(__sync_lock_test_and_set(lock, 1) == 1)
     .      .   73:     ;
     .      .   74: }
---
     .      .   75: 
     .      .   76: // for spin lock
     .      .   77: void unlock_spin(int *lock) { 
     .      .   78:   __sync_lock_release(lock);
     .      .   79: }
ROUTINE ====================== lock in /u/cs/ugrad/meiyi/2b/lab2_list.c
     0    987 Total samples (flat / cumulative)
     .      .   96:     }
     .      .   97:   }
     .      .   98:   return randomString;
     .      .   99: }
     .      .  100: 
---
     .      .  101: void lock(int ind,Sublist *sub_list) {
     .      .  102:   if(mutex_flag) {
     .      .  103:     struct timespec start, end;
     .      .  104:     clock_gettime(CLOCK_MONOTONIC, &start);
     .      .  105:     pthread_mutex_lock(&sub_list->mutex_lock);
     .      .  106:     clock_gettime(CLOCK_MONOTONIC, &end);
     .      .  107:     unsigned long mutex_time = ((long long)end.tv_sec - (long long)start.tv_sec) * 1000000000LL+(end.tv_nsec - start.tv_nsec);
     .      .  108:     waitTime[ind]+=mutex_time;
     .      .  109:   }
     .      .  110:   if(spin_flag)
     .    987  111:     lock_spin(&sub_list->spin_lock);      
     .      .  112: }
---
     .      .  113: 
     .      .  114: void unlock(Sublist *sub_list) {
     .      .  115:   if (mutex_flag)       
     .      .  116:     pthread_mutex_unlock(&sub_list->mutex_lock);
     .      .  117: 
ROUTINE ====================== lock_spin in /u/cs/ugrad/meiyi/2b/lab2_list.c
   987    987 Total samples (flat / cumulative)
     .      .   66:       sublists[i].spin_lock=0;
     .      .   67:   }
     .      .   68: }
     .      .   69: 
     .      .   70: // for spin lock
---
     .      .   71: void lock_spin(int *lock) {
   987    987   72:   while(__sync_lock_test_and_set(lock, 1) == 1)
     .      .   73:     ;
     .      .   74: }
---
     .      .   75: 
     .      .   76: // for spin lock
     .      .   77: void unlock_spin(int *lock) { 
     .      .   78:   __sync_lock_release(lock);
     .      .   79: }
Total: 964 samples
     860  89.2%  89.2%      860  89.2% lock_spin
      79   8.2%  97.4%       79   8.2% __strcmp_sse42
      13   1.3%  98.8%       56   5.8% SortedList_insert
       6   0.6%  99.4%       46   4.8% SortedList_lookup
       4   0.4%  99.8%        4   0.4% _init
       1   0.1%  99.9%        1   0.1% hashkey
       1   0.1% 100.0%      547  56.7% mul_SortedList_insert
       0   0.0% 100.0%      964 100.0% __clone
       0   0.0% 100.0%      964 100.0% listFunction
       0   0.0% 100.0%      860  89.2% lock
       0   0.0% 100.0%      417  43.3% mul_SortedList_lookup
       0   0.0% 100.0%      964 100.0% start_thread
ROUTINE ====================== lock in /u/cs/ugrad/meiyi/2b/lab2_list.c
     0    860 Total samples (flat / cumulative)
     .      .   96:     }
     .      .   97:   }
     .      .   98:   return randomString;
     .      .   99: }
     .      .  100: 
---
     .      .  101: void lock(int ind,Sublist *sub_list) {
     .      .  102:   if(mutex_flag) {
     .      .  103:     struct timespec start, end;
     .      .  104:     clock_gettime(CLOCK_MONOTONIC, &start);
     .      .  105:     pthread_mutex_lock(&sub_list->mutex_lock);
     .      .  106:     clock_gettime(CLOCK_MONOTONIC, &end);
     .      .  107:     unsigned long mutex_time = ((long long)end.tv_sec - (long long)start.tv_sec) * 1000000000LL+(end.tv_nsec - start.tv_nsec);
     .      .  108:     waitTime[ind]+=mutex_time;
     .      .  109:   }
     .      .  110:   if(spin_flag)
     .    860  111:     lock_spin(&sub_list->spin_lock);      
     .      .  112: }
---
     .      .  113: 
     .      .  114: void unlock(Sublist *sub_list) {
     .      .  115:   if (mutex_flag)       
     .      .  116:     pthread_mutex_unlock(&sub_list->mutex_lock);
     .      .  117: 
ROUTINE ====================== lock_spin in /u/cs/ugrad/meiyi/2b/lab2_list.c
   860    860 Total samples (flat / cumulative)
     .      .   66:       sublists[i].spin_lock=0;
     .      .   67:   }
     .      .   68: }
     .      .   69: 
     .      .   70: // for spin lock
---
     .      .   71: void lock_spin(int *lock) {
   860    860   72:   while(__sync_lock_test_and_set(lock, 1) == 1)
     .      .   73:     ;
     .      .   74: }
---
     .      .   75: 
     .      .   76: // for spin lock
     .      .   77: void unlock_spin(int *lock) { 
     .      .   78:   __sync_lock_release(lock);
     .      .   79: }
ROUTINE ====================== lock in /u/cs/ugrad/meiyi/2b/lab2_list.c
     0    860 Total samples (flat / cumulative)
     .      .   96:     }
     .      .   97:   }
     .      .   98:   return randomString;
     .      .   99: }
     .      .  100: 
---
     .      .  101: void lock(int ind,Sublist *sub_list) {
     .      .  102:   if(mutex_flag) {
     .      .  103:     struct timespec start, end;
     .      .  104:     clock_gettime(CLOCK_MONOTONIC, &start);
     .      .  105:     pthread_mutex_lock(&sub_list->mutex_lock);
     .      .  106:     clock_gettime(CLOCK_MONOTONIC, &end);
     .      .  107:     unsigned long mutex_time = ((long long)end.tv_sec - (long long)start.tv_sec) * 1000000000LL+(end.tv_nsec - start.tv_nsec);
     .      .  108:     waitTime[ind]+=mutex_time;
     .      .  109:   }
     .      .  110:   if(spin_flag)
     .    860  111:     lock_spin(&sub_list->spin_lock);      
     .      .  112: }
---
     .      .  113: 
     .      .  114: void unlock(Sublist *sub_list) {
     .      .  115:   if (mutex_flag)       
     .      .  116:     pthread_mutex_unlock(&sub_list->mutex_lock);
     .      .  117: 
ROUTINE ====================== lock_spin in /u/cs/ugrad/meiyi/2b/lab2_list.c
   860    860 Total samples (flat / cumulative)
     .      .   66:       sublists[i].spin_lock=0;
     .      .   67:   }
     .      .   68: }
     .      .   69: 
     .      .   70: // for spin lock
---
     .      .   71: void lock_spin(int *lock) {
   860    860   72:   while(__sync_lock_test_and_set(lock, 1) == 1)
     .      .   73:     ;
     .      .   74: }
---
     .      .   75: 
     .      .   76: // for spin lock
     .      .   77: void unlock_spin(int *lock) { 
     .      .   78:   __sync_lock_release(lock);
     .      .   79: }
Total: 1188 samples
    1029  86.6%  86.6%     1029  86.6% lock_spin
     116   9.8%  96.4%      116   9.8% __strcmp_sse42
      17   1.4%  97.8%       78   6.6% SortedList_insert
      16   1.3%  99.2%       79   6.6% SortedList_lookup
       8   0.7%  99.8%        8   0.7% _init
       1   0.1%  99.9%        1   0.1% hashkey
       1   0.1% 100.0%      381  32.1% mul_SortedList_lookup
       0   0.0% 100.0%     1188 100.0% __clone
       0   0.0% 100.0%     1188 100.0% listFunction
       0   0.0% 100.0%     1029  86.6% lock
       0   0.0% 100.0%      807  67.9% mul_SortedList_insert
       0   0.0% 100.0%     1188 100.0% start_thread
ROUTINE ====================== lock in /u/cs/ugrad/meiyi/2b/lab2_list.c
     0   1029 Total samples (flat / cumulative)
     .      .   96:     }
     .      .   97:   }
     .      .   98:   return randomString;
     .      .   99: }
     .      .  100: 
---
     .      .  101: void lock(int ind,Sublist *sub_list) {
     .      .  102:   if(mutex_flag) {
     .      .  103:     struct timespec start, end;
     .      .  104:     clock_gettime(CLOCK_MONOTONIC, &start);
     .      .  105:     pthread_mutex_lock(&sub_list->mutex_lock);
     .      .  106:     clock_gettime(CLOCK_MONOTONIC, &end);
     .      .  107:     unsigned long mutex_time = ((long long)end.tv_sec - (long long)start.tv_sec) * 1000000000LL+(end.tv_nsec - start.tv_nsec);
     .      .  108:     waitTime[ind]+=mutex_time;
     .      .  109:   }
     .      .  110:   if(spin_flag)
     .   1029  111:     lock_spin(&sub_list->spin_lock);      
     .      .  112: }
---
     .      .  113: 
     .      .  114: void unlock(Sublist *sub_list) {
     .      .  115:   if (mutex_flag)       
     .      .  116:     pthread_mutex_unlock(&sub_list->mutex_lock);
     .      .  117: 
ROUTINE ====================== lock_spin in /u/cs/ugrad/meiyi/2b/lab2_list.c
  1029   1029 Total samples (flat / cumulative)
     .      .   66:       sublists[i].spin_lock=0;
     .      .   67:   }
     .      .   68: }
     .      .   69: 
     .      .   70: // for spin lock
---
     .      .   71: void lock_spin(int *lock) {
  1029   1029   72:   while(__sync_lock_test_and_set(lock, 1) == 1)
     .      .   73:     ;
     .      .   74: }
---
     .      .   75: 
     .      .   76: // for spin lock
     .      .   77: void unlock_spin(int *lock) { 
     .      .   78:   __sync_lock_release(lock);
     .      .   79: }
ROUTINE ====================== lock in /u/cs/ugrad/meiyi/2b/lab2_list.c
     0   1029 Total samples (flat / cumulative)
     .      .   96:     }
     .      .   97:   }
     .      .   98:   return randomString;
     .      .   99: }
     .      .  100: 
---
     .      .  101: void lock(int ind,Sublist *sub_list) {
     .      .  102:   if(mutex_flag) {
     .      .  103:     struct timespec start, end;
     .      .  104:     clock_gettime(CLOCK_MONOTONIC, &start);
     .      .  105:     pthread_mutex_lock(&sub_list->mutex_lock);
     .      .  106:     clock_gettime(CLOCK_MONOTONIC, &end);
     .      .  107:     unsigned long mutex_time = ((long long)end.tv_sec - (long long)start.tv_sec) * 1000000000LL+(end.tv_nsec - start.tv_nsec);
     .      .  108:     waitTime[ind]+=mutex_time;
     .      .  109:   }
     .      .  110:   if(spin_flag)
     .   1029  111:     lock_spin(&sub_list->spin_lock);      
     .      .  112: }
---
     .      .  113: 
     .      .  114: void unlock(Sublist *sub_list) {
     .      .  115:   if (mutex_flag)       
     .      .  116:     pthread_mutex_unlock(&sub_list->mutex_lock);
     .      .  117: 
ROUTINE ====================== lock_spin in /u/cs/ugrad/meiyi/2b/lab2_list.c
  1029   1029 Total samples (flat / cumulative)
     .      .   66:       sublists[i].spin_lock=0;
     .      .   67:   }
     .      .   68: }
     .      .   69: 
     .      .   70: // for spin lock
---
     .      .   71: void lock_spin(int *lock) {
  1029   1029   72:   while(__sync_lock_test_and_set(lock, 1) == 1)
     .      .   73:     ;
     .      .   74: }
---
     .      .   75: 
     .      .   76: // for spin lock
     .      .   77: void unlock_spin(int *lock) { 
     .      .   78:   __sync_lock_release(lock);
     .      .   79: }
Total: 1418 samples
    1282  90.4%  90.4%     1282  90.4% lock_spin
     106   7.5%  97.9%      106   7.5% __strcmp_sse42
      14   1.0%  98.9%       74   5.2% SortedList_lookup
      13   0.9%  99.8%       62   4.4% SortedList_insert
       3   0.2% 100.0%        3   0.2% _init
       0   0.0% 100.0%     1418 100.0% __clone
       0   0.0% 100.0%     1418 100.0% listFunction
       0   0.0% 100.0%     1282  90.4% lock
       0   0.0% 100.0%      730  51.5% mul_SortedList_insert
       0   0.0% 100.0%      688  48.5% mul_SortedList_lookup
       0   0.0% 100.0%     1418 100.0% start_thread
ROUTINE ====================== lock in /u/cs/ugrad/meiyi/2b/lab2_list.c
     0   1282 Total samples (flat / cumulative)
     .      .   96:     }
     .      .   97:   }
     .      .   98:   return randomString;
     .      .   99: }
     .      .  100: 
---
     .      .  101: void lock(int ind,Sublist *sub_list) {
     .      .  102:   if(mutex_flag) {
     .      .  103:     struct timespec start, end;
     .      .  104:     clock_gettime(CLOCK_MONOTONIC, &start);
     .      .  105:     pthread_mutex_lock(&sub_list->mutex_lock);
     .      .  106:     clock_gettime(CLOCK_MONOTONIC, &end);
     .      .  107:     unsigned long mutex_time = ((long long)end.tv_sec - (long long)start.tv_sec) * 1000000000LL+(end.tv_nsec - start.tv_nsec);
     .      .  108:     waitTime[ind]+=mutex_time;
     .      .  109:   }
     .      .  110:   if(spin_flag)
     .   1282  111:     lock_spin(&sub_list->spin_lock);      
     .      .  112: }
---
     .      .  113: 
     .      .  114: void unlock(Sublist *sub_list) {
     .      .  115:   if (mutex_flag)       
     .      .  116:     pthread_mutex_unlock(&sub_list->mutex_lock);
     .      .  117: 
ROUTINE ====================== lock_spin in /u/cs/ugrad/meiyi/2b/lab2_list.c
  1282   1282 Total samples (flat / cumulative)
     .      .   66:       sublists[i].spin_lock=0;
     .      .   67:   }
     .      .   68: }
     .      .   69: 
     .      .   70: // for spin lock
---
     .      .   71: void lock_spin(int *lock) {
  1282   1282   72:   while(__sync_lock_test_and_set(lock, 1) == 1)
     .      .   73:     ;
     .      .   74: }
---
     .      .   75: 
     .      .   76: // for spin lock
     .      .   77: void unlock_spin(int *lock) { 
     .      .   78:   __sync_lock_release(lock);
     .      .   79: }
ROUTINE ====================== lock in /u/cs/ugrad/meiyi/2b/lab2_list.c
     0   1282 Total samples (flat / cumulative)
     .      .   96:     }
     .      .   97:   }
     .      .   98:   return randomString;
     .      .   99: }
     .      .  100: 
---
     .      .  101: void lock(int ind,Sublist *sub_list) {
     .      .  102:   if(mutex_flag) {
     .      .  103:     struct timespec start, end;
     .      .  104:     clock_gettime(CLOCK_MONOTONIC, &start);
     .      .  105:     pthread_mutex_lock(&sub_list->mutex_lock);
     .      .  106:     clock_gettime(CLOCK_MONOTONIC, &end);
     .      .  107:     unsigned long mutex_time = ((long long)end.tv_sec - (long long)start.tv_sec) * 1000000000LL+(end.tv_nsec - start.tv_nsec);
     .      .  108:     waitTime[ind]+=mutex_time;
     .      .  109:   }
     .      .  110:   if(spin_flag)
     .   1282  111:     lock_spin(&sub_list->spin_lock);      
     .      .  112: }
---
     .      .  113: 
     .      .  114: void unlock(Sublist *sub_list) {
     .      .  115:   if (mutex_flag)       
     .      .  116:     pthread_mutex_unlock(&sub_list->mutex_lock);
     .      .  117: 
ROUTINE ====================== lock_spin in /u/cs/ugrad/meiyi/2b/lab2_list.c
  1282   1282 Total samples (flat / cumulative)
     .      .   66:       sublists[i].spin_lock=0;
     .      .   67:   }
     .      .   68: }
     .      .   69: 
     .      .   70: // for spin lock
---
     .      .   71: void lock_spin(int *lock) {
  1282   1282   72:   while(__sync_lock_test_and_set(lock, 1) == 1)
     .      .   73:     ;
     .      .   74: }
---
     .      .   75: 
     .      .   76: // for spin lock
     .      .   77: void unlock_spin(int *lock) { 
     .      .   78:   __sync_lock_release(lock);
     .      .   79: }
